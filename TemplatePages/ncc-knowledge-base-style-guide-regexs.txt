New text processing:
0-1. Replace Section and Subsection titles and headlines with line breaks
0-2. Seperate lists and paragraphs with line breaks
0-3. Check for garbled non-bullet text and recopy from source if necassary
1-1. Delete artifact line breaks
        Find: (won't handle multi-line items with periods at break): ([^\.\n])\n([^\d\n􀁴])
        Replace: $1 $2
1-2. Check for lines not ending in punctuation.
2. process the lists        
    -replace all garbled ul bullets with tags
        Find: 􀁴􀀁 (.*)\n
        Replace: \t<li>\n\t\t$1\n\t</li>\n
    -replace all ordered lists bullets with li tags (has trouble with successive lines)
        Find: \d{1,2}\.\s(.*)\n
        replace: <li>\t\n$1\n</li>\n
    -add opening <ul> tags (won't capture sublists)
        find: \n\n(\t)?<li>
        replace: \n\n$1<ul>\n<li>
    -add closing </ul> tags (won't capture sublists)
        find: (\t?)</li>\n\n
        replace: $1</li>\n$1</ul>\n\n
    -check if any <ul> tags need to be switched to <ol>
    -reindent sublists        
3-1. paragraphs tags
    Find: \n{2}
    Replace: \n</p>\n\n<p>\n
// 3-2. Eliminate paragraph tags placed on lists incorrectly
//    find: (</[uo]l>)\n</p>
//    replace: $1
3-3. Get rid of <p> tags before <ul> and </p> after </ul>
    find: <p>\n(\t)?(<[ou]l>)
    replace: $1$2
    find: (\t)?(</[uo]l>)\n</p>
    replace $1$2
3-4. mop up <p> tags from beginnig and end of document
4. replace all ampersands &[\s\n], mdashes, and ndashes
5. encode all right curlies 
    find (dangerous, assumes all straight single quotes should be right curly): '|&#39;|’
    replace: &rsquo;
6. encode all left curlies;
    find: (‘) ALT + ] 
7-1. encode all left doubles (probably best to eyeball these)
    find: "|“
    replace: &ldquo;
7-2. encode all right doubles
    find: "|”
8. format ordinals with <sup> tags
    find: (\d{1,9})(st|nd|rd|th)
    replace: $1<sup>$2</sup>
9. format times
    find (dangerous): ([0-1][0-2]|\d)(?:[:\.])?(\d{2})?\s{0,2}([paPA][mM])
    replace (fails if no minutes are specified in the find, need to check for am/pm to be capatalized): $1:$2 $3
10. format time RANGES
    find (dangerous, works only after above time replacement): ([0-1]?\d{1}[:\.]\d{2}\s{0,2}[paPA][mM]).{0,3}([0-1]?\d{1}[:\.]\d{2}\s{0,2}[paPA][mM])
    replace: $1&ndash;$2
11. format phone NUMBERS
    find (safe for a single html file): (\(?)(\d{3})([\.\-–\)]\s?)(\d{3})([\.\-\s])(\d{4})
    replace: ($2) $4-$6 
12. replace all caps with spans 
    find (dangerous, will pick up NCCs and other acronyms; don't forget the case matching option in vscode): (\b)([A-Z]{2,}(?:\s+[A-Z]{2,})*)(\b)
    replace: $1<span class="ncc-transform-upper">$2</span>$3
    for each replace, backtrack and transform lower then capatalize.
13. look for bolds, italics, unbulleted lists, and links in original text and add appropriate tags/classes
14. Generate sections & subsections, insert content, and autoformat.
15. Fix broken <sup> line breaks due to vscode autoformat
        find: (\d{1,9})[\n\r]\s*<sup>(st|nd|rd|th)(<\/sup>)
        replace: $1<sup>$2</sup>



            -reformat list whitespacing (won't handle list items that contain sublists)
        find: (<li>)(.*(</li>){0}.*)(</li>)
        replace: $1\n$2$3\n$4